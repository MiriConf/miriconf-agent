package main

import (
	"archive/zip"
	"bufio"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/google/uuid"
)

type Hostname struct {
	Hostname string `json:"hostname"`
}

func main() {
	serverToken := os.Getenv("MIRICONF_TOKEN")
	if serverToken == "" {
		log.Fatal("miriconf server token is not specified, set with MIRICONF_TOKEN environment variable")
	}

	configPath := "/etc/nixos/configuration.nix"

	f, err := os.Open(configPath)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	checkforwarning(configPath, f)

	sendPing()

	zipName := fetchConfig()

	files, err := Unzip("/tmp/"+zipName+".zip", "/tmp/"+zipName)
	if err != nil {
		log.Fatal(err)
	}

	for _, v := range files {
		if strings.Contains(v, ".nix") {
			baseFile, err := os.Open(v)
			if err != nil {
				log.Fatal(err)
			}
			defer baseFile.Close()

			copyFile, err := os.Create("/etc/nixos/" + filepath.Base(v))
			if err != nil {
				log.Fatal(err)
			}
			defer copyFile.Close()

			_, err = io.Copy(copyFile, baseFile)
			if err != nil {
				log.Fatal(err)
			}

			err = copyFile.Sync()
			if err != nil {
				log.Fatal(err)
			}
		}
	}

	nixRebuild := exec.Command("nixos-rebuild", "switch")

	err = nixRebuild.Run()
	if err != nil {
		panic(err)
	}
}

func sendPing() {
	serverToken := os.Getenv("MIRICONF_TOKEN")

	data := strings.Split(serverToken, ".")

	tokenDec, err := base64.StdEncoding.DecodeString(data[1])
	if err != nil {
		panic(err)
	}

	var hostname Hostname
	json.Unmarshal(tokenDec, &hostname)

	client := http.Client{}
	response, err := http.NewRequest(http.MethodGet, "http://"+hostname.Hostname+"/api/v1/systems/ping", nil)
	if err != nil {
		print(err)
	}

	response.Header = http.Header{
		"Accept":        {"application/json"},
		"Content-Type":  {"application/json"},
		"Authorization": {"Bearer " + serverToken},
	}

	result, err := client.Do(response)
	if err != nil {
		panic(err)
	}

	defer result.Body.Close()

	body, err := ioutil.ReadAll(result.Body)
	if err != nil {
		print(err)
	}

	fmt.Println(string(body))
}

func fetchConfig() string {
	serverToken := os.Getenv("MIRICONF_TOKEN")

	tmpZip := uuid.New()
	file, err := os.Create("/tmp/" + tmpZip.String() + ".zip")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	data := strings.Split(serverToken, ".")

	tokenDec, err := base64.StdEncoding.DecodeString(data[1])
	if err != nil {
		panic(err)
	}

	var hostname Hostname
	json.Unmarshal(tokenDec, &hostname)

	client := http.Client{}
	response, err := http.NewRequest(http.MethodGet, "http://"+hostname.Hostname+"/api/v1/systems/fetch", nil)
	if err != nil {
		print(err)
	}

	response.Header = http.Header{
		"Accept":        {"application/json"},
		"Content-Type":  {"application/json"},
		"Authorization": {"Bearer " + serverToken},
	}

	result, err := client.Do(response)
	if err != nil {
		panic(err)
	}

	defer result.Body.Close()

	_, err = io.Copy(file, result.Body)
	if err != nil {
		panic(err)
	}

	return tmpZip.String()
}

func findImports(f *os.File) int {
	scanner := bufio.NewScanner(f)
	lineNumber := 1
	for scanner.Scan() {
		if strings.Contains(scanner.Text(), "imports =") {
			return lineNumber
		}
		lineNumber++
	}
	return -1
}

func addContent(index int, content string, path string) {
	f, err := os.Open(path)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	var lines []string
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	if err != nil {
		panic(err)
	}

	fileContent := ""
	for i, line := range lines {
		if i == index {
			fileContent += content
		}
		fileContent += line
		fileContent += "\n"
	}

	err = os.WriteFile(path, []byte(fileContent), 0644)
	if err != nil {
		panic(err)
	}
}

func checkforwarning(path string, f *os.File) {
	editWarning := []byte("# Warning. Do not edit this file, it is managed by miriconf\n")

	oldNix, err := os.ReadFile(path)
	if err != nil {
		panic(err)
	}

	if string(oldNix[0:9]) != "# Warning" {
		addContent(0, string(editWarning), path)
		importLine := findImports(f)
		if err != nil {
			panic(err)
		}

		if importLine != -1 {
			fmt.Println("import")
			addContent(importLine+1, "      ./miriconf.nix\n", path)
		}
	}
}

func Unzip(src string, destination string) ([]string, error) {
	var files []string

	r, err := zip.OpenReader(src)
	if err != nil {
		panic(err)
	}
	defer r.Close()

	for _, f := range r.File {
		fpath := filepath.Join(destination, f.Name)

		if !strings.HasPrefix(fpath, filepath.Clean(destination)+string(os.PathSeparator)) {
			return files, fmt.Errorf("%s is an illegal filepath", fpath)
		}

		files = append(files, fpath)

		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			return files, err
		}

		outFile, err := os.OpenFile(fpath,
			os.O_WRONLY|os.O_CREATE|os.O_TRUNC,
			f.Mode())
		if err != nil {
			panic(err)
		}

		rc, err := f.Open()
		if err != nil {
			panic(err)
		}

		_, err = io.Copy(outFile, rc)
		outFile.Close()
		rc.Close()
		if err != nil {
			panic(err)
		}
	}

	return files, nil
}
